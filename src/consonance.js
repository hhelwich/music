// Generated by CoffeeScript 1.8.0
(function() {
  var $freqCanvas, $mute, $window, audible, bandFreq, bandWidth, canvasSize, context, ctx, extractPos, freq12friction, freq2, freqFromNorm, freqToNorm, frequency, friction, hearingRange, isPlaying, mouseDown, mouseDrag, mouseUp, negate, normedBandFreq, oscillator, oscillator2, playButtonText, pow, unwarpFreq, warpFreq, warpHearingRange, windowSize;

  pow = Math.pow;

  hearingRange = [20, 20000];

  audible = function(f) {
    return (hearingRange[0] <= f && f <= hearingRange[1]);
  };

  bandFreq = [100, 200, 300, 400, 510, 630, 770, 920, 1080, 1270, 1480, 1720, 2000, 2320, 2700, 3150, 3700, 4400, 5300, 6400, 7700, 9500, 12000, 15500];

  bandWidth = function(f) {
    return 2.16744546124192e-21 * (pow(f, 6)) - 1.14331395137110e-16 * (pow(f, 5)) + 2.21019714132913e-12 * (pow(f, 4)) - 1.96581284278883e-08 * (pow(f, 3)) + 9.17364358141604e-05 * (pow(f, 2)) - 2.19151327511146e-02 * f + 1.04461844370372e+02;
  };

  friction = function(f, g) {
    var dist, halfWidth;
    if ((!audible(f)) || !audible(g)) {
      return 0;
    } else {
      halfWidth = (bandWidth((f + g) / 2)) / 2;
      dist = Math.abs(f - g);
      if (halfWidth <= dist) {
        return 0;
      } else {
        return Math.sin(dist / halfWidth * Math.PI);
      }
    }
  };

  $window = $(window);

  $freqCanvas = $("#frequency");

  ctx = $freqCanvas[0].getContext("2d");

  $mute = $("#mute");

  warpFreq = function(f) {
    return (Math.log(f)) / Math.LN2;
  };

  unwarpFreq = function(f) {
    return Math.pow(2, f);
  };

  warpHearingRange = hearingRange.map(warpFreq);

  freqToNorm = function(f) {
    return ((warpFreq(f)) - warpHearingRange[0]) / (warpHearingRange[1] - warpHearingRange[0]);
  };

  freqFromNorm = function(n) {
    return unwarpFreq(n * (warpHearingRange[1] - warpHearingRange[0]) + warpHearingRange[0]);
  };

  normedBandFreq = bandFreq.map(freqToNorm);

  windowSize = (function() {
    var getWindowSize;
    getWindowSize = function() {
      return {
        height: $window.height(),
        width: $window.width()
      };
    };
    return (($window.asEventStream("resize")).map(getWindowSize)).toProperty(getWindowSize());
  })();

  canvasSize = windowSize.map(function(size) {
    return {
      width: size.width,
      height: Math.floor(size.height * 80 / 100)
    };
  });

  canvasSize.assign($freqCanvas, "prop");

  canvasSize.assign($freqCanvas, "css");

  negate = function(b) {
    return !b;
  };

  isPlaying = ($mute.asEventStream("click")).scan(true, negate);

  playButtonText = isPlaying.map(function(playing) {
    if (playing) {
      return "Mute";
    } else {
      return "Play";
    }
  });

  playButtonText.assign($mute, "text");

  mouseDown = $freqCanvas.asEventStream("mousedown");

  mouseUp = $window.asEventStream("mouseup");

  extractPos = function(event) {
    return {
      x: event.pageX,
      y: event.pageY
    };
  };

  mouseDrag = mouseDown.flatMap(function(event) {
    return ((($window.asEventStream("mousemove")).toProperty(event)).takeUntil(mouseUp)).map(extractPos);
  });

  frequency = (canvasSize.sampledBy(mouseDrag, function(size, pos) {
    return freqFromNorm(pos.x / size.width);
  })).skipDuplicates().toProperty(440);

  freq2 = 880;

  freq12friction = (frequency.map(function(f) {
    return friction(f, freq2);
  })).skipDuplicates();

  Bacon.onValues(frequency, canvasSize, function(f, size) {
    var f0;
    f0 = 0;
    (normedBandFreq.concat(1)).forEach(function(wf, i) {
      var f1;
      ctx.fillStyle = i % 2 === 0 ? "#C0C0C0" : "#FFFFFF";
      f1 = Math.round(wf * size.width);
      ctx.fillRect(f0, 0, f1 - f0, size.height);
      return f0 = f1;
    });
    ctx.fillStyle = "blue";
    return ctx.fillRect(Math.round((freqToNorm(f)) * size.width), 0, 1, size.height);
  });

  if (typeof AudioContext === "undefined" || AudioContext === null) {
    console.log("no audio context available");
    return;
  }

  context = new AudioContext();

  oscillator = context.createOscillator();

  frequency.onValue(function(value) {
    return oscillator.frequency.value = value;
  });

  oscillator.connect(context.destination);

  oscillator2 = context.createOscillator();

  oscillator2.frequency.value = freq2;

  oscillator2.connect(context.destination);

  oscillator.start(0);

  oscillator2.start(0);

}).call(this);
